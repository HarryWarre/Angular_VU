{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SpotifyService {\n  constructor(http) {\n    this.http = http;\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Bearer BQDKAyROBM7SSQeUL-DN5c6XzYA4kVLyuYInWnRw2Ru4SzTldX3H7ZjXsQ_0SzkcDOn1R144Ig_TtIjkw6ZEnbwHYUb9-CD8wTrnLxJ5iwuktGijr4ab\"\n      })\n    };\n  }\n  getAllArtists(search) {\n    return this.http.get(`https://api.spotify.com/v1/search?q=${search}&type=artist`, this.httpOptions);\n  }\n  getArtists(id) {\n    return this.http.get(`https://api.spotify.com/v1/artists/${id}`, this.httpOptions);\n  }\n  getAlbums(id) {\n    return this.http.get(`https://api.spotify.com/v1/artists/${id}/albums`, this.httpOptions);\n  }\n  getTopSongs(artistId) {\n    return this.http.get(`https://api.spotify.com/v1/artists/${artistId}/top-tracks?country=US&limit=20&order=desc`, this.httpOptions);\n  }\n  getTopTracks(artistId) {\n    return this.http.get(`https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=US`, this.httpOptions);\n  }\n  getGenres() {\n    return this.http.get('https://api.spotify.com/v1/browse/categories', this.httpOptions).pipe(map(data => data.categories.items.map(item => {\n      return {\n        id: item.id,\n        name: item.name,\n        image: item.icons.length > 0 ? item.icons[0].url : ''\n      };\n    })));\n  }\n  getCategoryAlbums(genreId) {\n    const url = `https://api.spotify.com/v1/albums/${genreId}`;\n    return this.http.get(url, this.httpOptions).pipe(map(response => response.albums.items.map(item => ({\n      id: item.id,\n      name: item.name,\n      artist: item.artists[0].name,\n      image: item.images.length > 0 ? item.images[0].url : ''\n    }))));\n  }\n  getAlbumSongs(id) {\n    return this.http.get(`https://api.spotify.com/v1/albums/${id}/tracks`, this.httpOptions);\n  }\n  getAlbumDetails(id) {\n    return this.http.get(`https://api.spotify.com/v1/albums/${id}`, this.httpOptions);\n  }\n  getSongNames(id) {\n    return this.getAlbumSongs(id).pipe(map(data => {\n      return data.items.map(item => item.name);\n    }), catchError(error => {\n      console.log(error);\n      return of([]);\n    }));\n  }\n  getAlbumSongsV2(albumId) {\n    return this.http.get(`https://api.spotify.com/v1/albums/${albumId}/tracks`, this.httpOptions);\n  }\n}\nSpotifyService.ɵfac = function SpotifyService_Factory(t) {\n  return new (t || SpotifyService)(i0.ɵɵinject(i1.HttpClient));\n};\nSpotifyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SpotifyService,\n  factory: SpotifyService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","of","catchError","map","SpotifyService","constructor","http","headers","getAllArtists","search","get","httpOptions","getArtists","id","getAlbums","getTopSongs","artistId","getTopTracks","getGenres","pipe","data","categories","items","item","name","image","icons","length","url","getCategoryAlbums","genreId","response","albums","artist","artists","images","getAlbumSongs","getAlbumDetails","getSongNames","error","console","log","getAlbumSongsV2","albumId","factory","providedIn"],"sourceRoot":"","sources":["D:\\version2_assign\\src\\app\\spotify.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\ninterface Album {\n  id: string;\n  name: string;\n  artist: string;\n  image: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpotifyService {\n\n  constructor(private http: HttpClient) { }\n\n  private httpOptions = {\n    headers: new HttpHeaders({\n      \"Accept\": \"application/json\",\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": \"Bearer BQDKAyROBM7SSQeUL-DN5c6XzYA4kVLyuYInWnRw2Ru4SzTldX3H7ZjXsQ_0SzkcDOn1R144Ig_TtIjkw6ZEnbwHYUb9-CD8wTrnLxJ5iwuktGijr4ab\"\n    })\n  }\n\n  getAllArtists(search:string) {\n    return this.http.get<any>(`https://api.spotify.com/v1/search?q=${search}&type=artist`, this.httpOptions)\n  }\n  getArtists(id:string) {\n    return this.http.get<any>(`https://api.spotify.com/v1/artists/${id}`, this.httpOptions)\n  }\n  getAlbums(id:string) {\n    return this.http.get<any>(`https://api.spotify.com/v1/artists/${id}/albums`, this.httpOptions)\n  }\n  getTopSongs(artistId: string): Observable<any> {\n    return this.http.get<any>(`https://api.spotify.com/v1/artists/${artistId}/top-tracks?country=US&limit=20&order=desc`, this.httpOptions);\n  }   \n  getTopTracks(artistId: string): Observable<any> {\n    return this.http.get<any>(`https://api.spotify.com/v1/artists/${artistId}/top-tracks?market=US`, this.httpOptions);\n  }  \n\n  getGenres(): Observable<any> {\n  return this.http.get<any>('https://api.spotify.com/v1/browse/categories', this.httpOptions)\n    .pipe(map(data => data.categories.items.map((item: { id: any; name: any; icons: string | any[]; }) => {\n      return { \n        id: item.id,\n        name: item.name,\n        image: item.icons.length > 0 ? item.icons[0].url : ''\n      };\n    })));\n  }\n\n  getCategoryAlbums(genreId: string): Observable<Album[]> {\n    const url = `https://api.spotify.com/v1/albums/${genreId}`;\n    return this.http.get<any>(url, this.httpOptions).pipe(\n      map((response) =>\n        response.albums.items.map((item: any) => ({\n          id: item.id,\n          name: item.name,\n          artist: item.artists[0].name,\n          image: item.images.length > 0 ? item.images[0].url : ''\n        }))\n      )\n    );\n  }\n\n  getAlbumSongs(id:string) {\n    return this.http.get<any>(`https://api.spotify.com/v1/albums/${id}/tracks`, this.httpOptions);\n  }\n  \n  getAlbumDetails(id: string): Observable<any> {\n    return this.http.get<any>(`https://api.spotify.com/v1/albums/${id}`, this.httpOptions);\n  }\n\n  getSongNames(id: string) {\n    return this.getAlbumSongs(id).pipe(\n      map<any, string[]>(data => {\n        return data.items.map((item: { name: string, id: string}) => item.name);\n      }),\n      catchError(error => {\n        console.log(error);\n        return of([]);\n      })\n    );\n  } \n  \n  getAlbumSongsV2(albumId: string) {\n    return this.http.get<any>(`https://api.spotify.com/v1/albums/${albumId}/tracks`, this.httpOptions);\n  }\n  \n}  \n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}